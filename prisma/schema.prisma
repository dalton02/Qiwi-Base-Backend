generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario{

  id     Int    @id @default(autoincrement())
  login  String @db.VarChar(200) @unique
  nome   String @db.VarChar(200)
  senha  String? 
  email  String? @db.VarChar(200) @unique

  perfil String @db.VarChar(200)

  criadoEm       DateTime  @default(now()) @map("criado_em")
  atualizadoEm   DateTime  @default(now()) @updatedAt  @map("atualizado_em")

  idAluno      Int?     @unique @map("id_aluno")
  aluno        Aluno?    

  postagens Postagem[]
  comentarios Comentario[]
  notificacoes Notificacao[]
  reacoes Reacao[]
  
  @@map("usuario")

}

model Aluno{
  
  id Int @id @default(autoincrement())
  
  codigo Int @db.Integer
  curso  String @db.VarChar(200)
  
  
  usuario      Usuario  @relation(fields: [idUsuario], references: [id])
  idUsuario    Int      @unique @map("id_usuario")
  @@map("aluno")

}

model Postagem{
  id Int @id @default(autoincrement()) 
  tipo String //Enum: "noticia,artigo"
  titulo String @db.VarChar(200)
  conteudo String @db.Text()
  tags String[]
 
  comentarios Comentario[]
  reacoes Reacao[]
  
  usuarioId Int?  @map("usuario_id")
  usuario Usuario? @relation(fields: [usuarioId],references: [id])

  criadoEm       DateTime  @default(now()) @map("criado_em")
  atualizadoEm   DateTime  @default(now()) @updatedAt  @map("atualizado_em")

  @@unique([tipo, titulo])
  @@map("postagem")
}

model Comentario{
  id Int @id @default(autoincrement())
  conteudo String @db.VarChar(1000)
  
  postagemId Int  @map("postagem_id")
  postagem Postagem @relation(fields: [postagemId],references: [id])

  usuarioId Int @map("usuario_id")
  usuario Usuario @relation(fields: [usuarioId],references: [id])
  
  parenteId Int? @map("parente_id")
  parenteComentario Comentario? @relation("ComentarioFilho",fields: [parenteId],references: [id])
  filhos Comentario[] @relation("ComentarioFilho") 

  criadoEm       DateTime  @default(now()) @map("criado_em")
  atualizadoEm   DateTime  @default(now()) @updatedAt  @map("atualizado_em")
  @@map("comentario")
}

model Reacao{
  id Int @id @default(autoincrement())
  tipo String @db.VarChar(50)
  postagemId Int  @map("postagem_id")
  postagem Postagem @relation(fields: [postagemId],references: [id])
  usuarioId Int  @map("usuario_id")
  usuario Usuario @relation(fields: [usuarioId],references: [id])
  @@map("reacao")
}

model Notificacao {
  id             Int       @id @default(autoincrement())
  usuarioId      Int       @map("usuario_id")
  tipo           String 
  mensagem       String
  status         String   
  usuario        Usuario   @relation(fields: [usuarioId], references: [id])
  criadoEm       DateTime  @default(now()) @map("criado_em")
  atualizadoEm   DateTime  @default(now()) @updatedAt  @map("atualizado_em")
  @@map("notificacao")
}